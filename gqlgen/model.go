// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen

import (
	"fmt"
	"io"
	"strconv"
)

type Order struct {
	ID      string   `json:"id"`
	User    *User    `json:"user"`
	Product *Product `json:"product"`
}

type Product struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Price       float64 `json:"price"`
	Image       string  `json:"image"`
	Description string  `json:"description"`
	Stock       int     `json:"stock"`
	Shop        *Shop   `json:"shop"`
}

type Receipt struct {
	ID      string  `json:"id"`
	Content string  `json:"content"`
	Total   float64 `json:"total"`
	Shop    *Shop   `json:"shop"`
}

type Shop struct {
	ID       string    `json:"id"`
	Name     string    `json:"name"`
	Image    string    `json:"image"`
	Owners   []User    `json:"owners"`
	Products []Product `json:"products"`
}

type User struct {
	ID         string    `json:"id"`
	Name       string    `json:"name"`
	Email      string    `json:"email"`
	Avatar     string    `json:"avatar"`
	Points     float64   `json:"points"`
	Role       Role      `json:"role"`
	Orders     []Order   `json:"orders"`
	Receipts   []Receipt `json:"receipts"`
	IsVerified bool      `json:"is_verified"`
	Shops      []Shop    `json:"shops"`
}

type Role string

const (
	RoleAdmin     Role = "Admin"
	RoleCustomer  Role = "Customer"
	RoleShopOwner Role = "ShopOwner"
)

var AllRole = []Role{
	RoleAdmin,
	RoleCustomer,
	RoleShopOwner,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleCustomer, RoleShopOwner:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
